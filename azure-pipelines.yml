trigger:
  - main

variables:
  buildConfiguration: 'Release'
  releaseBranchName: 'release'

  vmImageName: 'ubuntu-latest'

stages:
  - stage: Deploy_Build
    displayName: 'Build the web application'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: $(vmImageName)
          demands:
            - npm
        variables:
          wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
          dotnetSdkVersion: '6.x'
      
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK $(dotnetSdkVersion)'
            inputs:
              version: '$(dotnetSdkVersion)'
            
          - task: Npm@1
            displayName: 'Run npm install'
            inputs:
              verbose: false
          
          - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
            displayName: 'Compile Sass assests'

          - task: gulp@1
            displayName: 'Run gulp task'

          - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
            displayName: 'Write build info'
            workingDirectory: $(wwwrootDir)
          
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: restore
              projects: '**/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(buildConfiguration)'
            inputs:
              command: build
              arguments: '--no-restore --configuration $(buildConfiguration)'
              projects: '**/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish the project - $(buildConfiguration)'
            inputs:
              command: publish
              projects: '**/*.csproj'
              publishWebProjects: false
              arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
              zipAfterPublish: true

          - script: | 
              echo rootDir: $(wwwrootDir)
              echo Build.DefinitionName: $(Build.DefinitionName)
              echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory) 
            displayName: Show information
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Build artifact
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
              
  - stage: Deploy_Dev
    dependsOn: Deploy_Build
    jobs:
      - job: Build

      - template: templates/templates-deploy-with-env/azure-pipelines-templates.yml
        parameters:
          env: dev
          appServiceName: $(webAppNameDev)
          package: $(Pipeline.WorkSpace)/drop/
    # displayName: 'Deploy to the dev environment'
    # dependsOn: Build
    # condition: succeeded()
    # jobs:
    #   - deployment: Deploy
    #     pool:
    #       vmImage: $(vmImageName)
    #     environment: dev
    #     variables:
    #       - group: Release
    #     strategy:
    #       runOnce:
    #         deploy:
    #           steps:
    #             - download: current
    #               artifact: drop
    #             - task: AzureWebApp@1
    #               displayName: 'Auzre App Service Deploy: website'
    #               inputs:
    #                 azureSubscription: 'MyARMSubscription'
    #                 appType: webAppLinux
    #                 appName: $(webAppNameDev)
    #                 package: '$(Pipeline.Workspace)/drop/'
    #             - script: echo $(Pipeline.Workspace)
    
  - stage: Deploy_Staging
    displayName: 'Deploy to staging environment'
    dependsOn: Deploy_Dev
    jobs:
      - deployment: Deploy
        pool:
          vmImage: $(vmImageName)
        environment: staging
        variables:
          - group: Release
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: drop
                - task: AzureWebApp@1
                  displayName: Deploy to Azure Web App with Staging Env
                  inputs:
                    azureSubscription: 'MyARMSubscription'
                    appType: webAppLinux
                    appName: $(webAppNameDev)
                    package: $(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip

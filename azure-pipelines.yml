trigger:
  - main

parameters:
  - name: azureSubscription
    type: string
    default: MyARMSubscription

variables:
  - group: web-app-variables

  - name: buildConfiguration
    value: 'Release'
  
  - name: releaseBranchName
    value: 'release'

stages:
  - stage: Deploy_Build
    displayName: 'Build the web application'
    jobs:
      - job: 'Build'
        displayName: 'Build job'
        pool:
          vmImage: 'ubuntu-latest'
          demands:
            - npm
        variables:
          wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
          dotnetSdkVersion: '6.x'
      
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK $(dotnetSdkVersion)'
            inputs:
              version: '$(dotnetSdkVersion)'
            
          - task: Npm@1
            displayName: 'Run npm install'
            inputs:
              verbose: false
          
          - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
            displayName: 'Compile Sass assests'

          - task: gulp@1
            displayName: 'Run gulp task'

          - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
            displayName: 'Write build info'
            workingDirectory: $(wwwrootDir)
          
          - task: DotNetCoreCLI@2
            displayName: 'Restore project dependencies'
            inputs:
              command: restore
              projects: '**/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: 'Build the project - $(buildConfiguration)'
            inputs:
              command: build
              arguments: '--no-restore --configuration $(buildConfiguration)'
              projects: '**/*.csproj'
          
          - task: DotNetCoreCLI@2
            displayName: 'Publish the project - $(buildConfiguration)'
            inputs:
              command: publish
              projects: '**/*.csproj'
              publishWebProjects: false
              arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
              zipAfterPublish: true

          - script: | 
              echo rootDir: $(wwwrootDir)
              echo Build.DefinitionName: $(Build.DefinitionName)
              echo Build.ArtifactStagingDirectory: $(Build.ArtifactStagingDirectory) 
            displayName: Show information
          
          - task: PublishBuildArtifacts@1
            displayName: Publish Build artifact
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: 'drop'
              publishLocation: 'Container'
              
  - stage: Deploy_Dev
    displayName: Deploy to the dev environment
    dependsOn: Deploy_Build
    jobs:
      - job: Build

      - template: templates/templates-deploy-with-env/azure-pipelines-templates.yml
        parameters:
          env: dev
          appServiceName: $(WebAppNameDev)
          package: $(Pipeline.WorkSpace)/drop/

  - stage: Deploy_Staging
    displayName: Deploy to the staging environment
    dependsOn: Deploy_Dev
    jobs:
      - job: Build
      
      - template: templates/templates-deploy-with-env/azure-pipelines-templates.yml
        parameters:
          env: staging
          appServiceName: $(WebAppNameStaging)
          package: $(Pipeline.Workspace)/drop/$(buildConfiguration)/*.zip
